generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String         @id @default(uuid())
  name             String?
  username         String         @unique
  email            String         @unique
  password         String
  admin            Boolean        @default(false)
  resetToken       String?
  resetTokenExpiry DateTime?
  createdAt        DateTime       @default(now())
  userProperties   UserProperty[]
  uploadedDocuments Document[]
  sentMessages     Message[]      @relation("MessageSender")
  receivedMessages Message[]      @relation("MessageRecipient")
}

model Property {
  id             String         @id @default(uuid())
  name           String
  address        String
  city           String
  state          String
  zip            String
  code           String         @unique
  images         String[]
  primaryImage   String?
  createdAt      DateTime       @default(now())
  userProperties UserProperty[]
  documents      Document[]
  messages       Message[]
}

model UserProperty {
  id         String   @id @default(uuid())
  userId     String
  propertyId String
  createdAt  DateTime @default(now())
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, propertyId])
}

model Document {
  id           String   @id @default(uuid())
  name         String
  originalName String
  type         String
  size         Int
  url          String
  blobKey      String?
  propertyId   String
  property     Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  documentType String   // "financial", "star_report", or "budget"
  year         Int
  month        Int
  uploadDate   DateTime @default(now())
  uploadedBy   String
  uploadedByUser User   @relation(fields: [uploadedBy], references: [id])

  @@index([propertyId, year, month, documentType])
}

model Message {
  id                String    @id @default(uuid())
  subject           String
  message           String    @db.Text
  propertyId        String
  property          Property  @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  senderId          String
  sender            User      @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)
  recipientId       String?
  recipient         User?     @relation("MessageRecipient", fields: [recipientId], references: [id], onDelete: Cascade)
  emailNotification Boolean   @default(false)
  isRead            Boolean   @default(false)
  sentDate          DateTime  @default(now())
  readDate          DateTime?

  @@index([propertyId, recipientId])
}
